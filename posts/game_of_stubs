So you just spiked out some new functionality. It took a whole day and you now have a nice pile of code which is doing its job, with absolutely no tests. Obviously you want to add tests, but then you find yourself either of these two situations.

### Situation 1: Untestable Code.
It is often the case that *your code is untestable*, that is: there are no means for you to exercise the pieces of functionality that you want to test and/or there are no means for you to inspect their outputs or side effects. 
This happens because in a spiking sitatuation you care mostly (solely?) about getting the code to do whatever it is you want it do. 
Hence, you do not write tests, so you never have to deal with testability obstacles that plauge your code (the exact degree of which may vary).
If you try to refactor the code into a more testing-friendly shape you soon realize that your options are limited: as there are no tests, there is no way for you to determine whether a refactoring step was indeed behavior-preserving. 

In other words: 
>To add tests you need to refactor. When there are no tests you can't refactor. 

There are some techniques to cope with that. But they deserve their own post. Let us focus on the second case.

### Situation 2: Reverse Engineering.
You somehow managed to write testable code but, still, you did not write any tests yet. You now have to cope with this: in order to have meaningful tests you need to *reverse engineer meaningful inputs from the code*. 
These "inputs" can be anything from primitive values, all the way to JSON or XML blobs, to some smart comibnation of domain and library objects. 
These inputs can be passed from the test to the production code either directly (usually via parameter passing) or indirectly, through the interaction of the production code with Stubs/Mocks created by your test. 
Either way, you want these inputs to be *meaningful* in the sense that they need to make execution pass through the code paths that your test cares about.

Here is the technique that I usually use for reverse engineering inputs. I call it **Game of Stubs**

1. Start from a simple test the has no assertions. 
1. Stub all collaborators. This will isolate the code and prevent tests runs from affecting the real world. The stubs should initially be the most degenerate value that could possibly work. a `null` or an empty object `{}` is a good starting point.
1. Run your test. It will usually fail with an exception because your stubs, being degenerate, do not provide the services they are expected to provide.
1. Examine the failure message. Add the missing bit to the stub.
1. Repeat until execution passes through the path you are interested at. 
1. Add assertions/expectations as needed.

Here's an example. 

We start with an assertion-free test and we stub all collaborators. In node.js I use the `rewire` module which provides a way for tests to alter dependencies of production code:

    var rewire = require('rewire');
    var promoter = rewire('../acceptance/promoter.js');
    
    promoter.__set__('Deployer', {});
    
    describe('promoter', function() {
      it('does something', function(done) {
        promoter('a', 'b');
        done();
      });
    });


When I run this test I get an exception-induced failure:

    1) promoter does something
     Message:
       TypeError: object is not a function
     Stacktrace:
       TypeError: object is not a function
      at main (/home/imaman/workspace/green-site/acceptance/promoter.js:77:18)
      at null.<anonymous> (/home/imaman/workspace/green-site/spec/promoter.spec.js:12:5)
      at null.<anonymous> (/home/imaman/workspace/green-site/node_modules/jasmine-node/lib/jasmine-node/async-callback.js:45:37)


Here, we failed with an `object is not a function` error. Thus, we transform the `Deployer` collaborator into a function.

    var rewire = require('rewire');
    var promoter = rewire('../acceptance/promoter.js');
    
    function DeployerStub() {
    }
    promoter.__set__('Deployer', DeployerStub);    
    ...

We now repeat the process. Running the test again, we get: `TypeError: Object #<DeployerStub> has no method 'init'`, so we add an `init()` function:

    function DeployerStub() {
      this.init = function() {};
    }

    promoter.__set__('Deployer', DeployerStub);


And so on....

This may take a while but you can do it almost on auto-pilot mode. Instead of digging into the production code you just need to look at the failure message and add whatever it is that is missing there. Eventually, you will get a nice set of minimal stubs, which is exactly what is needed for a good unit test.

### Replay
Here's a sequence of commits, depicting a Game of Stubs I had recently played:

[Iteration 1](https://github.com/imaman/green-site/commit/d08ac6ab0605c765b62cb9322f647c5e47b7492a)
[Iteration 2](https://github.com/imaman/green-site/commit/c9a4de122b6967652e7c65051d5f07129369d4fe)
[Iteration 3](https://github.com/imaman/green-site/commit/61c47962b0ab2ca5cfed9da973c39fa3bac252af)
[Iteration 4](https://github.com/imaman/green-site/commit/45ef4efe763df39093a984098b5b14e776301ca8)
[Iteration 5](https://github.com/imaman/green-site/commit/70967d2ce90add255010f3d5af1e1bf43c72905b)
[Iteration 6](https://github.com/imaman/green-site/commit/10c1a813aa47bc8f4a1ceefd935a30c669cd9526)
[Iteration 7](https://github.com/imaman/green-site/commit/2ae8440d227394505d86a80bbf9901cba1087361)
[Iteration 8](https://github.com/imaman/green-site/commit/3e4251ec004a186d8b7ba3ff9aa7e0a904aaa71a)
[Iteration 9](https://github.com/imaman/green-site/commit/f7f7761101862abb2a3d9c7538bf21a17175b5a2)
[Iteration 10](https://github.com/imaman/green-site/commit/7ba2103e37782d91160ebf1cea56c4fcd6202148)
[Iteration 12](https://github.com/imaman/green-site/commit/d7221e62a4d5087892559f835321473025ed80b5)
[Iteration 13](https://github.com/imaman/green-site/commit/1f5887954c1aeb0c5744dad9230f5781fe1f75ac)
[Iteration 14](https://github.com/imaman/green-site/commit/fdd8afaa004bfb3c2866e547d37632e03293de12)


